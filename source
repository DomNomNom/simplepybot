Help on module irclib:

NNAAMMEE
    irclib - irclib -- Internet Relay Chat (IRC) protocol client library.

FFIILLEE
    /usr/lib/python2.7/site-packages/irclib.py

DDEESSCCRRIIPPTTIIOONN
    This library is intended to encapsulate the IRC protocol at a quite
    low level.  It provides an event-driven IRC client framework.  It has
    a fairly thorough support for the basic IRC protocol, CTCP, DCC chat,
    but DCC file transfers is not yet supported.
    
    In order to understand how to make an IRC client, I'm afraid you more
    or less must understand the IRC specifications.  They are available
    here: [IRC specifications].
    
    The main features of the IRC client framework are:
    
      * Abstraction of the IRC protocol.
      * Handles multiple simultaneous IRC server connections.
      * Handles server PONGing transparently.
      * Messages to the IRC server are done by calling methods on an IRC
        connection object.
      * Messages from an IRC server triggers events, which can be caught
        by event handlers.
      * Reading from and writing to IRC server sockets are normally done
        by an internal select() loop, but the select()ing may be done by
        an external main loop.
      * Functions can be registered to execute at specified times by the
        event-loop.
      * Decodes CTCP tagging correctly (hopefully); I haven't seen any
        other IRC client implementation that handles the CTCP
        specification subtilties.
      * A kind of simple, single-server, object-oriented IRC client class
        that dispatches events to instance methods is included.
    
    Current limitations:
    
      * The IRC protocol shines through the abstraction a bit too much.
      * Data is not written asynchronously to the server, i.e. the write()
        may block if the TCP buffers are stuffed.
      * There are no support for DCC file transfers.
      * The author haven't even read RFC 2810, 2811, 2812 and 2813.
      * Like most projects, documentation is lacking...
    
    .. [IRC specifications] http://www.irchelp.org/irchelp/rfc/

CCLLAASSSSEESS
    exceptions.Exception(exceptions.BaseException)
        IRCError
            DCCConnectionError
            ServerConnectionError
                ServerNotConnectedError
    Connection
        DCCConnection
        ServerConnection
    Event
    IRC
    SimpleIRCClient
    
    class CCoonnnneeccttiioonn
     |  Base class for IRC connections.
     |  
     |  Must be overridden.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, irclibobj)
     |  
     |  eexxeeccuuttee__aatt(self, at, function, arguments=())
     |  
     |  eexxeeccuuttee__ddeellaayyeedd(self, delay, function, arguments=())
    
    class DDCCCCCCoonnnneeccttiioonn(Connection)
     |  This class represents a DCC connection.
     |  
     |  DCCConnection objects are instantiated by calling the dcc
     |  method on an IRC object.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, irclibobj, dcctype)
     |  
     |  ccoonnnneecctt(self, address, port)
     |      Connect/reconnect to a DCC peer.
     |      
     |      Arguments:
     |          address -- Host/IP address of the peer.
     |      
     |          port -- The port number to connect to.
     |      
     |      Returns the DCCConnection object.
     |  
     |  ddiissccoonnnneecctt(self, message='')
     |      Hang up the connection and close the object.
     |      
     |      Arguments:
     |      
     |          message -- Quit message.
     |  
     |  lliisstteenn(self)
     |      Wait for a connection/reconnection from a DCC peer.
     |      
     |      Returns the DCCConnection object.
     |      
     |      The local IP address and port are available as
     |      self.localaddress and self.localport.  After connection from a
     |      peer, the peer address and port are available as
     |      self.peeraddress and self.peerport.
     |  
     |  pprriivvmmssgg(self, string)
     |      Send data to DCC peer.
     |      
     |      The string will be padded with appropriate LF if it's a DCC
     |      CHAT session.
     |  
     |  pprroocceessss__ddaattaa(self)
     |      [Internal]
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Connection:
     |  
     |  eexxeeccuuttee__aatt(self, at, function, arguments=())
     |  
     |  eexxeeccuuttee__ddeellaayyeedd(self, delay, function, arguments=())
    
    class DDCCCCCCoonnnneeccttiioonnEErrrroorr(IRCError)
     |  Method resolution order:
     |      DCCConnectionError
     |      IRCError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors inherited from IRCError:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class EEvveenntt
     |  Class representing an IRC event.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, eventtype, source, target, arguments=None)
     |      Constructor of Event objects.
     |      
     |      Arguments:
     |      
     |          eventtype -- A string describing the event.
     |      
     |          source -- The originator of the event (a nick mask or a server).
     |      
     |          target -- The target of the event (a nick or a channel).
     |      
     |          arguments -- Any event specific arguments.
     |  
     |  aarrgguummeennttss(self)
     |      Get the event arguments.
     |  
     |  eevveennttttyyppee(self)
     |      Get the event type.
     |  
     |  ssoouurrccee(self)
     |      Get the event source.
     |  
     |  ttaarrggeett(self)
     |      Get the event target.
    
    class IIRRCC
     |  Class that handles one or several IRC server connections.
     |  
     |  When an IRC object has been instantiated, it can be used to create
     |  Connection objects that represent the IRC connections.  The
     |  responsibility of the IRC object is to provide an event-driven
     |  framework for the connections and to keep the connections alive.
     |  It runs a select loop to poll each connection's TCP socket and
     |  hands over the sockets with incoming data for processing by the
     |  corresponding connection.
     |  
     |  The methods of most interest for an IRC client writer are server,
     |  add_global_handler, remove_global_handler, execute_at,
     |  execute_delayed, process_once and process_forever.
     |  
     |  Here is an example:
     |  
     |      irc = irclib.IRC()
     |      server = irc.server()
     |      server.connect("irc.some.where", 6667, "my_nickname")
     |      server.privmsg("a_nickname", "Hi there!")
     |      irc.process_forever()
     |  
     |  This will connect to the IRC server irc.some.where on port 6667
     |  using the nickname my_nickname and send the message "Hi there!"
     |  to the nickname a_nickname.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, fn_to_add_socket=None, fn_to_remove_socket=None, fn_to_add_timeout=None)
     |      Constructor for IRC objects.
     |      
     |      Optional arguments are fn_to_add_socket, fn_to_remove_socket
     |      and fn_to_add_timeout.  The first two specify functions that
     |      will be called with a socket object as argument when the IRC
     |      object wants to be notified (or stop being notified) of data
     |      coming on a new socket.  When new data arrives, the method
     |      process_data should be called.  Similarly, fn_to_add_timeout
     |      is called with a number of seconds (a floating point number)
     |      as first argument when the IRC object wants to receive a
     |      notification (by calling the process_timeout method).  So, if
     |      e.g. the argument is 42.17, the object wants the
     |      process_timeout method to be called after 42 seconds and 170
     |      milliseconds.
     |      
     |      The three arguments mainly exist to be able to use an external
     |      main loop (for example Tkinter's or PyGTK's main app loop)
     |      instead of calling the process_forever method.
     |      
     |      An alternative is to just call ServerConnection.process_once()
     |      once in a while.
     |  
     |  aadddd__gglloobbaall__hhaannddlleerr(self, event, handler, priority=0)
     |      Adds a global handler function for a specific event type.
     |      
     |      Arguments:
     |      
     |          event -- Event type (a string).  Check the values of the
     |          numeric_events dictionary in irclib.py for possible event
     |          types.
     |      
     |          handler -- Callback function.
     |      
     |          priority -- A number (the lower number, the higher priority).
     |      
     |      The handler function is called whenever the specified event is
     |      triggered in any of the connections.  See documentation for
     |      the Event class.
     |      
     |      The handler functions are called in priority order (lowest
     |      number is highest priority).  If a handler function returns
     |      "NO MORE", no more handlers will be called.
     |  
     |  ddcccc(self, dcctype='chat')
     |      Creates and returns a DCCConnection object.
     |      
     |      Arguments:
     |      
     |          dcctype -- "chat" for DCC CHAT connections or "raw" for
     |                     DCC SEND (or other DCC types). If "chat",
     |                     incoming data will be split in newline-separated
     |                     chunks. If "raw", incoming data is not touched.
     |  
     |  ddiissccoonnnneecctt__aallll(self, message='')
     |      Disconnects all connections.
     |  
     |  eexxeeccuuttee__aatt(self, at, function, arguments=())
     |      Execute a function at a specified time.
     |      
     |      Arguments:
     |      
     |          at -- Execute at this time (standard "time_t" time).
     |      
     |          function -- Function to call.
     |      
     |          arguments -- Arguments to give the function.
     |  
     |  eexxeeccuuttee__ddeellaayyeedd(self, delay, function, arguments=())
     |      Execute a function after a specified time.
     |      
     |      Arguments:
     |      
     |          delay -- How many seconds to wait.
     |      
     |          function -- Function to call.
     |      
     |          arguments -- Arguments to give the function.
     |  
     |  pprroocceessss__ddaattaa(self, sockets)
     |      Called when there is more data to read on connection sockets.
     |      
     |      Arguments:
     |      
     |          sockets -- A list of socket objects.
     |      
     |      See documentation for IRC.__init__.
     |  
     |  pprroocceessss__ffoorreevveerr(self, timeout=0.2)
     |      Run an infinite loop, processing data from connections.
     |      
     |      This method repeatedly calls process_once.
     |      
     |      Arguments:
     |      
     |          timeout -- Parameter to pass to process_once.
     |  
     |  pprroocceessss__oonnccee(self, timeout=0)
     |      Process data from connections once.
     |      
     |      Arguments:
     |      
     |          timeout -- How long the select() call should wait if no
     |                     data is available.
     |      
     |      This method should be called periodically to check and process
     |      incoming data, if there are any.  If that seems boring, look
     |      at the process_forever method.
     |  
     |  pprroocceessss__ttiimmeeoouutt(self)
     |      Called when a timeout notification is due.
     |      
     |      See documentation for IRC.__init__.
     |  
     |  rreemmoovvee__gglloobbaall__hhaannddlleerr(self, event, handler)
     |      Removes a global handler function.
     |      
     |      Arguments:
     |      
     |          event -- Event type (a string).
     |      
     |          handler -- Callback function.
     |      
     |      Returns 1 on success, otherwise 0.
     |  
     |  sseerrvveerr(self)
     |      Creates and returns a ServerConnection object.
    
    class IIRRCCEErrrroorr(exceptions.Exception)
     |  Represents an IRC exception.
     |  
     |  Method resolution order:
     |      IRCError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class SSeerrvveerrCCoonnnneeccttiioonn(Connection)
     |  This class represents an IRC server connection.
     |  
     |  ServerConnection objects are instantiated by calling the server
     |  method on an IRC object.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, irclibobj)
     |  
     |  aaccttiioonn(self, target, action)
     |      Send a CTCP ACTION command.
     |  
     |  aadddd__gglloobbaall__hhaannddlleerr(self, *args)
     |      Add global handler.
     |      
     |      See documentation for IRC.add_global_handler.
     |  
     |  aaddmmiinn(self, server='')
     |      Send an ADMIN command.
     |  
     |  cclloossee(self)
     |      Close the connection.
     |      
     |      This method closes the connection permanently; after it has
     |      been called, the object is unusable.
     |  
     |  ccoonnnneecctt(self, server, port, nickname, password=None, username=None, ircname=None, localaddress='', localport=0, ssl=False, ipv6=False)
     |      Connect/reconnect to a server.
     |      
     |      Arguments:
     |      
     |          server -- Server name.
     |      
     |          port -- Port number.
     |      
     |          nickname -- The nickname.
     |      
     |          password -- Password (if any).
     |      
     |          username -- The username.
     |      
     |          ircname -- The IRC name ("realname").
     |      
     |          localaddress -- Bind the connection to a specific local IP address.
     |      
     |          localport -- Bind the connection to a specific local port.
     |      
     |          ssl -- Enable support for ssl.
     |      
     |          ipv6 -- Enable support for ipv6.
     |      
     |      This function can be called to reconnect a closed connection.
     |      
     |      Returns the ServerConnection object.
     |  
     |  ccttccpp(self, ctcptype, target, parameter='')
     |      Send a CTCP command.
     |  
     |  ccttccpp__rreeppllyy(self, target, parameter)
     |      Send a CTCP REPLY command.
     |  
     |  ddiissccoonnnneecctt(self, message='')
     |      Hang up the connection.
     |      
     |      Arguments:
     |      
     |          message -- Quit message.
     |  
     |  ggeett__nniicckknnaammee(self)
     |      Get the (real) nick name.
     |      
     |      This method returns the (real) nickname.  The library keeps
     |      track of nick changes, so it might not be the nick name that
     |      was passed to the connect() method.
     |  
     |  ggeett__sseerrvveerr__nnaammee(self)
     |      Get the (real) server name.
     |      
     |      This method returns the (real) server name, or, more
     |      specifically, what the server calls itself.
     |  
     |  gglloobbooppss(self, text)
     |      Send a GLOBOPS command.
     |  
     |  iinnffoo(self, server='')
     |      Send an INFO command.
     |  
     |  iinnvviittee(self, nick, channel)
     |      Send an INVITE command.
     |  
     |  iiss__ccoonnnneecctteedd(self)
     |      Return connection status.
     |      
     |      Returns true if connected, otherwise false.
     |  
     |  iissoonn(self, nicks)
     |      Send an ISON command.
     |      
     |      Arguments:
     |      
     |          nicks -- List of nicks.
     |  
     |  jjooiinn(self, channel, key='')
     |      Send a JOIN command.
     |  
     |  kkiicckk(self, channel, nick, comment='')
     |      Send a KICK command.
     |  
     |  lliinnkkss(self, remote_server='', server_mask='')
     |      Send a LINKS command.
     |  
     |  lliisstt(self, channels=None, server='')
     |      Send a LIST command.
     |  
     |  lluusseerrss(self, server='')
     |      Send a LUSERS command.
     |  
     |  mmooddee(self, target, command)
     |      Send a MODE command.
     |  
     |  mmoottdd(self, server='')
     |      Send an MOTD command.
     |  
     |  nnaammeess(self, channels=None)
     |      Send a NAMES command.
     |  
     |  nniicckk(self, newnick)
     |      Send a NICK command.
     |  
     |  nnoottiiccee(self, target, text)
     |      Send a NOTICE command.
     |  
     |  ooppeerr(self, nick, password)
     |      Send an OPER command.
     |  
     |  ppaarrtt(self, channels, message='')
     |      Send a PART command.
     |  
     |  ppaassss__(self, password)
     |      Send a PASS command.
     |  
     |  ppiinngg(self, target, target2='')
     |      Send a PING command.
     |  
     |  ppoonngg(self, target, target2='')
     |      Send a PONG command.
     |  
     |  pprriivvmmssgg(self, target, text)
     |      Send a PRIVMSG command.
     |  
     |  pprriivvmmssgg__mmaannyy(self, targets, text)
     |      Send a PRIVMSG command to multiple targets.
     |  
     |  pprroocceessss__ddaattaa(self)
     |      [Internal]
     |  
     |  qquuiitt(self, message='')
     |      Send a QUIT command.
     |  
     |  rreemmoovvee__gglloobbaall__hhaannddlleerr(self, *args)
     |      Remove global handler.
     |      
     |      See documentation for IRC.remove_global_handler.
     |  
     |  sseenndd__rraaww(self, string)
     |      Send raw string to the server.
     |      
     |      The string will be padded with appropriate CR LF.
     |  
     |  ssqquuiitt(self, server, comment='')
     |      Send an SQUIT command.
     |  
     |  ssttaattss(self, statstype, server='')
     |      Send a STATS command.
     |  
     |  ttiimmee(self, server='')
     |      Send a TIME command.
     |  
     |  ttooppiicc(self, channel, new_topic=None)
     |      Send a TOPIC command.
     |  
     |  ttrraaccee(self, target='')
     |      Send a TRACE command.
     |  
     |  uusseerr(self, username, realname)
     |      Send a USER command.
     |  
     |  uusseerrhhoosstt(self, nicks)
     |      Send a USERHOST command.
     |  
     |  uusseerrss(self, server='')
     |      Send a USERS command.
     |  
     |  vveerrssiioonn(self, server='')
     |      Send a VERSION command.
     |  
     |  wwaallllooppss(self, text)
     |      Send a WALLOPS command.
     |  
     |  wwhhoo(self, target='', op='')
     |      Send a WHO command.
     |  
     |  wwhhooiiss(self, targets)
     |      Send a WHOIS command.
     |  
     |  wwhhoowwaass(self, nick, max='', server='')
     |      Send a WHOWAS command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Connection:
     |  
     |  eexxeeccuuttee__aatt(self, at, function, arguments=())
     |  
     |  eexxeeccuuttee__ddeellaayyeedd(self, delay, function, arguments=())
    
    class SSeerrvveerrCCoonnnneeccttiioonnEErrrroorr(IRCError)
     |  Method resolution order:
     |      ServerConnectionError
     |      IRCError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors inherited from IRCError:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class SSeerrvveerrNNoottCCoonnnneecctteeddEErrrroorr(ServerConnectionError)
     |  Method resolution order:
     |      ServerNotConnectedError
     |      ServerConnectionError
     |      IRCError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors inherited from IRCError:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class SSiimmpplleeIIRRCCCClliieenntt
     |  A simple single-server IRC client class.
     |  
     |  This is an example of an object-oriented wrapper of the IRC
     |  framework.  A real IRC client can be made by subclassing this
     |  class and adding appropriate methods.
     |  
     |  The method on_join will be called when a "join" event is created
     |  (which is done when the server sends a JOIN messsage/command),
     |  on_privmsg will be called for "privmsg" events, and so on.  The
     |  handler methods get two arguments: the connection object (same as
     |  self.connection) and the event object.
     |  
     |  Instance attributes that can be used by sub classes:
     |  
     |      ircobj -- The IRC instance.
     |  
     |      connection -- The ServerConnection instance.
     |  
     |      dcc_connections -- A list of DCCConnection instances.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |  
     |  ccoonnnneecctt(self, server, port, nickname, password=None, username=None, ircname=None, localaddress='', localport=0, ssl=False, ipv6=False)
     |      Connect/reconnect to a server.
     |      
     |      Arguments:
     |      
     |          server -- Server name.
     |      
     |          port -- Port number.
     |      
     |          nickname -- The nickname.
     |      
     |          password -- Password (if any).
     |      
     |          username -- The username.
     |      
     |          ircname -- The IRC name.
     |      
     |          localaddress -- Bind the connection to a specific local IP address.
     |      
     |          localport -- Bind the connection to a specific local port.
     |      
     |          ssl -- Enable support for ssl.
     |      
     |          ipv6 -- Enable support for ipv6.
     |      
     |      This function can be called to reconnect a closed connection.
     |  
     |  ddcccc__ccoonnnneecctt(self, address, port, dcctype='chat')
     |      Connect to a DCC peer.
     |      
     |      Arguments:
     |      
     |          address -- IP address of the peer.
     |      
     |          port -- Port to connect to.
     |      
     |      Returns a DCCConnection instance.
     |  
     |  ddcccc__lliisstteenn(self, dcctype='chat')
     |      Listen for connections from a DCC peer.
     |      
     |      Returns a DCCConnection instance.
     |  
     |  ssttaarrtt(self)
     |      Start the IRC client.

FFUUNNCCTTIIOONNSS
    iipp__nnuummssttrr__ttoo__qquuaadd(num)
        Convert an IP number as an integer given in ASCII
        representation (e.g. '3232235521') to an IP address string
        (e.g. '192.168.0.1').
    
    iipp__qquuaadd__ttoo__nnuummssttrr(quad)
        Convert an IP address string (e.g. '192.168.0.1') to an IP
        number as an integer given in ASCII representation
        (e.g. '3232235521').
    
    iirrcc__lloowweerr(s)
        Returns a lowercased string.
        
        The definition of lowercased comes from the IRC specification (RFC
        1459).
    
    iiss__cchhaannnneell(string)
        Check if a string is a channel name.
        
        Returns true if the argument is a channel name, otherwise false.
    
    mmaasskk__mmaattcchheess(nick, mask)
        Check if a nick matches a mask.
        
        Returns true if the nick matches, otherwise false.
    
    nnmm__ttoo__hh(s)
        Get the host part of a nickmask.
        
        (The source of an Event is a nickmask.)
    
    nnmm__ttoo__nn(s)
        Get the nick part of a nickmask.
        
        (The source of an Event is a nickmask.)
    
    nnmm__ttoo__uu(s)
        Get the user part of a nickmask.
        
        (The source of an Event is a nickmask.)
    
    nnmm__ttoo__uuhh(s)
        Get the userhost part of a nickmask.
        
        (The source of an Event is a nickmask.)
    
    ppaarrssee__cchhaannnneell__mmooddeess(mode_string)
        Parse a channel mode string.
        
        The function returns a list of lists with three members: sign,
        mode and argument.  The sign is "+" or "-".  The argument is
        None if mode isn't one of "b", "k", "l", "v" or "o".
        
        Example:
        
        >>> irclib.parse_channel_modes("+ab-c foo")
        [['+', 'a', None], ['+', 'b', 'foo'], ['-', 'c', None]]
    
    ppaarrssee__nniicckk__mmooddeess(mode_string)
        Parse a nick mode string.
        
        The function returns a list of lists with three members: sign,
        mode and argument.  The sign is "+" or "-".  The argument is
        always None.
        
        Example:
        
        >>> irclib.parse_nick_modes("+ab-c")
        [['+', 'a', None], ['+', 'b', None], ['-', 'c', None]]

DDAATTAA
    DDEEBBUUGG = 0
    VVEERRSSIIOONN = (0, 4, 8)
    aallll__eevveennttss = ['dcc_connect', 'dcc_disconnect', 'dccmsg', 'disconnect',...
    ggeenneerraatteedd__eevveennttss = ['dcc_connect', 'dcc_disconnect', 'dccmsg', 'discon...
    nniicckk__cchhaarraacctteerrss = r'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX...
    nnuummeerriicc__eevveennttss = {'001': 'welcome', '002': 'yourhost', '003': 'created...
    pprroottooccooll__eevveennttss = ['error', 'join', 'kick', 'mode', 'part', 'ping', 'p...

